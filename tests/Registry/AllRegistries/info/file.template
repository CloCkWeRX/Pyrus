<?php
// all registry tests must pass this (as must PackageFile objects)

$testit = array();
foreach ($reg->contents as $file) {
    $testit[] = (array) $file;
}

$test->assertEquals(array (
  0 => 
  array (
    'attribs' => 
    array (
      'role' => 'doc',
      'name' => 'update_channel.php',
    ),
  ),
  1 => 
  array (
    'attribs' => 
    array (
      'role' => 'script',
      'name' => 'pearscs',
    ),
  ),
  2 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Exception.php',
    ),
  ),
  3 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Category.php',
    ),
  ),
  4 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Maintainer.php',
    ),
  ),
  5 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Manager.php',
    ),
  ),
  6 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Package.php',
    ),
  ),
  7 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Release.php',
    ),
  ),
  8 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Categories.php',
    ),
  ),
  9 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Channel.php',
    ),
  ),
  10 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'CLI.php',
    ),
  ),
  11 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Exception.php',
    ),
  ),
  12 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'Get.php',
    ),
  ),
  13 => 
  array (
    'attribs' => 
    array (
      'role' => 'php',
      'name' => 'SimpleChannelServer.php',
    ),
  ),
), $testit, 'output');

$test->assertEquals('php', $file->role, 'php 1');
$test->assertEquals(basename($file->name), $reg->files['src/SimpleChannelServer.php']['attribs']['name'], 'verify we have the same thing');
$test->assertEquals('php', $reg->files['src/SimpleChannelServer.php']['attribs']['role'], 'again verify');
$file->role = 'oog';
$test->assertEquals('oog', $file->role, 'php 2');
$test->assertEquals('oog', $reg->files['src/SimpleChannelServer.php']['attribs']['role'], 'again verify 2');

$temp = new PEAR2_Pyrus_PackageFile_v2Iterator_FileTag(array('attribs' => array('name' => 'SimpleChannelServer.php',
                                                   'role' => 'php',
                                                   'install-as' => 'poop')), 'src', $reg);
$test->assertEquals(array('name' => 'SimpleChannelServer.php', 'role' => 'php'), $temp['attribs'], 'attribs with install-as');
$test->assertEquals('poop', $temp['install-as'], 'install-as');
$test->assertEquals('poop', $temp->{'install-as'}, 'install-as __get');
$test->assertEquals('poop', $temp->name, 'magic name install-as returned instead of name');

$replace = new PEAR2_Pyrus_Task_Replace(PEAR2_Pyrus_Config::current(), PEAR2_PYRUS_TASK_PACKAGE);
$replace->init(array('attribs' => array('from' => '@' . 'PACKAGE_VERSION@',
                          'to' => 'version',
                          'type' => 'package-info')), array('from' => '@' . 'PACKAGE_VERSION@',
                          'to' => 'version',
                          'type' => 'package-info'), '2.0.0');

$temp->{'tasks:replace'} = $replace;
try {
    $temp->{'tasks:replace'} = 1;
    throw new Exception('invalid task setting succeeded');
} catch (PEAR2_Pyrus_PackageFile_Exception $e) {
    $test->assertEquals('Cannot set tasks:replace to non-' .
                'PEAR2_Pyrus_Task_Common object in file src/SimpleChannelServer.php', $e->getMessage(), 'invalid tasks setting');
}
try {
    $temp->{'tasks:replace'} = $replace;
} catch (PEAR2_Pyrus_PackageFile_Exception $e) {
    throw $e;
}
try {
    $temp->grooplebooble = 1;
    throw new Exception('invalid attribute setting succeeded');
} catch (PEAR2_Pyrus_PackageFile_Exception $e) {
    $test->assertEquals('Cannot set invalid attribute grooplebooble for file src/SimpleChannelServer.php', $e->getMessage(), 'invalid attribute setting');
}
